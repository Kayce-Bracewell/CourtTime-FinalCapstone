// <auto-generated />
using System;
using CourtTime.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CourtTime_Capstone.Migrations
{
    [DbContext(typeof(CourtTimeDbContext))]
    [Migration("20240617114054_AddCourtLocationUpdates")]
    partial class AddCourtLocationUpdates
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CourtTime.Models.Court", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CourtSize")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Courts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main St, Nashville, TN",
                            CourtSize = "Standard",
                            Image = "https://upload.wikimedia.org/wikipedia/commons/thumb/4/4a/Tennis_courts_at_Centennial_Sportsplex.jpg/1200px-Tennis_courts_at_Centennial_Sportsplex.jpg",
                            Name = "Nashville Central Tennis Courts",
                            Type = "Hard"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Riverside Dr, Nashville, TN",
                            CourtSize = "Standard",
                            Image = "https://www.wkrn.com/wp-content/uploads/sites/73/2022/08/Spring-Hill-tennis-development.jpg?w=900",
                            Name = "East Nashville Tennis Club",
                            Type = "Clay"
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 West End Ave, Nashville, TN",
                            CourtSize = "Standard",
                            Image = "https://www.sayvilleschools.org/cms/lib/NY02205481/Centricity/ModuleInstance/36413/large/mstc2.jpg?rnd=0.124836626986431",
                            Name = "West End Tennis Center",
                            Type = "Grass"
                        },
                        new
                        {
                            Id = 4,
                            Address = "1011 Belmont Blvd, Nashville, TN",
                            CourtSize = "Standard",
                            Image = "https://images.squarespace-cdn.com/content/v1/5da5ec373a95ae6d8896a01e/1674655479911-XKCFOXJXBZH8RT4H5WXA/DJI_0587.JPG",
                            Name = "Belmont Tennis Courts",
                            Type = "Hard"
                        },
                        new
                        {
                            Id = 5,
                            Address = "1213 Vanderbilt Pl, Nashville, TN",
                            CourtSize = "Standard",
                            Image = "https://lipscombsports.com/images/2020/5/26/TennisComplex1.jpg?preset=large.socialmediaimage",
                            Name = "Vanderbilt Tennis Academy",
                            Type = "Clay"
                        },
                        new
                        {
                            Id = 6,
                            Address = "1415 Oak St, Brentwood, TN",
                            CourtSize = "Standard",
                            Image = "https://d2114hmso7dut1.cloudfront.net/customers/b4646402-ea8d-11ed-bec3-0614187498c1/sites/b470533e-ea8d-11ed-a9ae-0614187498c1/files/9b5c0730-eb64-11ed-9d8e-a59b9fd26edf/_thumbnails/1280.webp?t=1683305290&original_extension=png",
                            Name = "Brentwood Tennis Club",
                            Type = "Grass"
                        },
                        new
                        {
                            Id = 7,
                            Address = "1617 Main St, Franklin, TN",
                            CourtSize = "Standard",
                            Image = "https://d1ja9tyo8nbkbc.cloudfront.net/50513653_S0035/S0035/S0035-R0100/RTC2637758/660c142006ad0445e3b02e70.jpg?version=1712068686&width=640",
                            Name = "Franklin Community Tennis Courts",
                            Type = "Hard"
                        },
                        new
                        {
                            Id = 8,
                            Address = "1819 Hillsboro Rd, Nashville, TN",
                            CourtSize = "Standard",
                            Image = "https://www.novasports.com/wp-content/uploads/UT3-Copy-4-1024x768.jpg",
                            Name = "Green Hills Tennis Courts",
                            Type = "Clay"
                        },
                        new
                        {
                            Id = 9,
                            Address = "2021 Harding Pike, Nashville, TN",
                            CourtSize = "Standard",
                            Image = "https://cdn.synthetic-turf.com/uploads/2013/11/22064524/Tennis-court11.jpg",
                            Name = "Belle Meade Tennis Courts",
                            Type = "Grass"
                        },
                        new
                        {
                            Id = 10,
                            Address = "2223 Lebanon Pike, Nashville, TN",
                            CourtSize = "Standard",
                            Image = "https://assets.simpleviewinc.com/simpleview/image/upload/crm/napavalley/SilveradoResortandSpa_KT-208_34CEA051-F9D8-4657-BA66AB13B30AB737_436c29dd-fbb8-4ad4-b21be972570ea72f.jpg",
                            Name = "Hermitage Tennis Club",
                            Type = "Hard"
                        },
                        new
                        {
                            Id = 11,
                            Address = "2425 Lake Rd, Hendersonville, TN",
                            CourtSize = "Standard",
                            Image = "https://www.campwidji.org/sites/campwidji/files/2020-02/tennis-yo-730.jpg",
                            Name = "Hendersonville Heights Tennis Courts",
                            Type = "Clay"
                        },
                        new
                        {
                            Id = 12,
                            Address = "2627 Germantown Rd, Nashville, TN",
                            CourtSize = "Standard",
                            Image = "https://transform.octanecdn.com/width/1600/https://octanecdn.com/turftekusacom/turftekusacom_610595326.jpg",
                            Name = "Germantown Tennis Stadium",
                            Type = "Grass"
                        });
                });

            modelBuilder.Entity("CourtTime.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CourtId")
                        .HasColumnType("integer");

                    b.Property<int>("MatchLeaderId")
                        .HasColumnType("integer");

                    b.Property<int>("MatchOpponentId")
                        .HasColumnType("integer");

                    b.Property<string>("ScheduledTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.HasIndex("MatchLeaderId");

                    b.HasIndex("MatchOpponentId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("CourtTime.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNum")
                        .HasColumnType("text");

                    b.Property<double?>("Skill")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "4468 Temple Rd.",
                            Email = "kayceb@gmail.com",
                            FirstName = "Kayce",
                            IdentityUserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            LastName = "Bracewell",
                            PhoneNum = "(621)789-3733",
                            Skill = 4.0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35",
                            Name = "Admin",
                            NormalizedName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d21b5d29-0488-4023-af8f-17b9cf9183e6",
                            Email = "admina@strator.comx",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEM7jthdc8FkE0/GUvPHrMOvJewGO51+fZhnBoK3Za8M9mOII8I2iQY2IfRqbV2+eqg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b05049f7-00cc-413a-b154-ea47527e2110",
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "dbc40bc6-0829-4ac5-a3ed-180f5e916a5f",
                            RoleId = "c3aaeb97-d2ba-4a53-a521-4eea61e59b35"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CourtTime.Models.Match", b =>
                {
                    b.HasOne("CourtTime.Models.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourtTime.Models.UserProfile", "MatchLeader")
                        .WithMany()
                        .HasForeignKey("MatchLeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CourtTime.Models.UserProfile", "MatchOpponent")
                        .WithMany()
                        .HasForeignKey("MatchOpponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Court");

                    b.Navigation("MatchLeader");

                    b.Navigation("MatchOpponent");
                });

            modelBuilder.Entity("CourtTime.Models.UserProfile", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
